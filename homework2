#include "pch.h"
#include <iostream>
using namespace std;
#include "./gdal/gdal_priv.h"
#pragma comment(lib, "gdal_i.lib")

int main()
{
	GDALDataset *poSrcDS;
	GDALDataset *poDstDS;
	GDALAllRegister();
	const char *srcPath = "second.jpg";
	const char *dstPath = "RES04.jpg";
	const char * format = "Gtiff";
	GByte  *buffTmp;
	GByte *buffTmp1;
	GByte *buffTmp2;
	GByte *buffTmp3;
	poSrcDS = (GDALDataset *)GDALOpen(srcPath, GA_ReadOnly);

	int StartX, StartY, tmpXlen, tmpYlen;
	int imgXlen, imgYlen;
	int bandNum;
	int StartX2, StartY2;
	int StartX3, StartY3;
	int tmpXlen2, tmpYlen2, tmpXlen3, tmpYlen3;
	imgXlen = poSrcDS->GetRasterXSize();
	imgYlen = poSrcDS->GetRasterYSize();
	bandNum = poSrcDS->GetRasterCount();
	//void *pData;
//int nBandMap;
//GDALDriver *poDriver;
//poDriver = GetGDALDriverManager()->GetDriverByName(format);
//char ** papszMetadata = poDriver->GetMetadata();
	StartX = 100;
	StartY = 100;
	tmpXlen = 200;
	tmpYlen = 150;
	StartX2 = 300;
	StartY2 = 300;
	tmpXlen2 = 100;
	tmpYlen2 = 50;
	StartX3 = 500;
	StartY3 = 500;
	tmpXlen3 = 50;
	tmpYlen3 = 100;

	buffTmp = (GByte *)CPLMalloc(tmpXlen*tmpYlen * sizeof(GByte));
	buffTmp1 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	buffTmp2 = (GByte*)CPLMalloc(tmpXlen2*tmpYlen2 * sizeof(GByte));
	buffTmp3 = (GByte*)CPLMalloc(tmpXlen3*tmpYlen3 * sizeof(GByte));

	poDstDS = GetGDALDriverManager()->GetDriverByName("GTiff")->Create(dstPath, imgXlen,
		imgYlen, bandNum, GDT_Byte, NULL);
	for (int i = 0; i < bandNum; i++) {
		poSrcDS->GetRasterBand(i + 1)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmp1, imgXlen, imgYlen, GDT_Byte,
			0, 0);
		poDstDS->GetRasterBand(i + 1)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmp1, imgXlen, imgYlen, GDT_Byte,
			0, 0);
	}

	poSrcDS->GetRasterBand(1)->RasterIO(GF_Read, StartX, StartY, tmpXlen, tmpYlen, buffTmp,
		tmpXlen, tmpYlen, GDT_Byte, 0, 0);
	for (int j = 0; j < tmpYlen; j++) {
		for (int i = 0; i < tmpXlen; i++) {
			buffTmp[j*tmpXlen + i] = (GByte)255;
		}
	}
	poDstDS->GetRasterBand(1)->RasterIO(GF_Write, StartX, StartY, tmpXlen, tmpYlen, buffTmp,
		tmpXlen, tmpYlen, GDT_Byte, 0, 0);
	
	
	for (int m = 0; m < bandNum; m++) {
	poSrcDS->GetRasterBand(m+1)->RasterIO(GF_Read, StartX2, StartY2, tmpXlen2, tmpYlen2, buffTmp2,
		tmpXlen2, tmpYlen2, GDT_Byte, 0, 0);
	for (int j = 0; j < tmpYlen2; j++) {
		for (int i = 0; i < tmpXlen2; i++) {
			buffTmp2[j*tmpXlen2 + i] = (GByte)255;
		}
	}
	poDstDS->GetRasterBand(m+1)->RasterIO(GF_Write, StartX2, StartY2, tmpXlen2, tmpYlen2, buffTmp2,
		tmpXlen2, tmpYlen2, GDT_Byte, 0, 0);
	}
	

	for (int k = 0; k < bandNum; k++) {
		poSrcDS->GetRasterBand(k+1)->RasterIO(GF_Read, StartX3, StartY3, tmpXlen3, tmpYlen3, buffTmp3,
			tmpXlen3, tmpYlen3, GDT_Byte, 0, 0);
		for (int j = 0; j < tmpYlen3; j++) {
			for (int i = 0; i < tmpXlen3; i++) {
				buffTmp3[j*tmpXlen3 + i] = (GByte)0;
			}
		}
		poDstDS->GetRasterBand(k+1)->RasterIO(GF_Write, StartX3, StartY3, tmpXlen3, tmpYlen3, buffTmp3,
			tmpXlen3, tmpYlen3, GDT_Byte, 0, 0);
	}


	CPLFree(buffTmp);
	CPLFree(buffTmp1);
	CPLFree(buffTmp2);
	CPLFree(buffTmp3);
	GDALClose(poDstDS);
	GDALClose(poSrcDS);
	system("PAUSE");
	return 0;
}
